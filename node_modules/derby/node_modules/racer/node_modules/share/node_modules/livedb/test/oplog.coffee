# This is a mocha test suite for oplog implementations
#
#
# getOps collection, docName, start, end
assert = require 'assert'

# Wait for the returned function to be called a given number of times, then call the
# callback.
makePassPart = (n, callback) ->
  remaining = n
  ->
    remaining--
    if remaining == 0
      callback()
    else if remaining < 0
      throw new Error "expectCalls called more than #{n} times"

counter = 1

module.exports = (create) ->
  describe 'oplog', ->
    beforeEach ->
      @db = create()
      @cName = 'users'
      @docName = "optest #{counter++}"

    afterEach ->
      @db.close()

  describe 'getOps', ->
    it 'returns [] for a nonexistant document, with any arguments': (done) ->
      num = 0
      check = (error, ops) ->
        throw new Error error if error
        assert.deepEqual ops, []
        done() if ++num is 7

      @db.getOps @cName, @docName, 0, 0, check
      @db.getOps @cName, @docName, 0, 1, check
      @db.getOps @cName, @docName, 0, 10, check
      @db.getOps @cName, @docName, 0, null, check
      @db.getOps @cName, @docName, 10, 10, check
      @db.getOps @cName, @docName, 10, 11, check
      @db.getOps @cName, @docName, 10, null, check

    it 'returns [] for a new document, with any arguments': (done) ->
      num = 0
      check = (error, ops) ->
        throw new Error error if error
        test.deepEqual ops, []
        done() if ++num is 7

      @db.create @docName, {snapshot:null, type:'simple', meta:{}, v:0}, (error) =>
        test.equal error, null
        @db.getOps @docName, 0, 0, check
        @db.getOps @docName, 0, 1, check
        @db.getOps @docName, 0, 10, check
        @db.getOps @docName, 0, null, check
        @db.getOps @docName, 10, 10, check
        @db.getOps @docName, 10, 11, check
        @db.getOps @docName, 10, null, check

    'getOps returns ops': (test) ->
      num = 0
      check = (expected) -> (error, ops) ->
        throw new Error error if error
        assert.deepEqual ops, expected or []
        done() if ++num is 5

      @db.create @docName, {snapshot:null, type:'text', meta:{}, v:0}, (error) =>
        @db.writeOp @docName, {op:[{p:0,i:'hi'}], v:0, meta:{}}, =>
          @db.getOps @docName, 0, 0, check []
          @db.getOps @docName, 0, 1, check [{op:[{p:0,i:'hi'}], meta:{}}]
          @db.getOps @docName, 0, null, check [{op:[{p:0,i:'hi'}], meta:{}}]
          @db.getOps @docName, 1, 1, check []
          @db.getOps @docName, 1, null, check []

